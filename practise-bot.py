from aiogram import Bot, Dispatcher, types, executor
from aiogram.types.web_app_info import WebAppInfo
import asyncio

import marksup as nav
from database import Database

bot = Bot('6522840153:AAFr0EbaPSFh5cYoz7cvxBCknBC_oUS-h_w')
dp = Dispatcher(bot)

handler = Database('database.db')





@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    if not handler.user_exist(user_id):
        handler.add_user(user_id)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫')
    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=nav.mainmenu)


@dp.message_handler(commands=['delete_account'])
async def delete_account(message: types.Message):
    user_id = message.from_user.id
    if handler.user_exist(user_id):
        if handler.delete_user(user_id):
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–ü—Ä–æ—Ñ–∏–ª—å" –∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    await message.reply("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞", reply_markup=types.ReplyKeyboardRemove())

    await start(message)

@dp.message_handler(commands=['profile'])
async def show_profile(message: types.Message):
    user_info = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n \n" + handler.get_user_info(message.from_user.id)
    await message.answer(user_info)

@dp.message_handler(commands=['settings'])
async def show_settings(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å!', reply_markup=nav.changeMenu)

@dp.message_handler(lambda message: message.text in ['–ò–∑–º–µ–Ω–∏—Ç –∞–Ω–∫–µ—Ç—É üñä', '–ù–∞–∑–∞–¥ üëàüèª'])
async def change_settings(message: types.Message):
    if message.text == '–ò–∑–º–µ–Ω–∏—Ç –∞–Ω–∫–µ—Ç—É üñä':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:')
        await handler.set_signup(message.from_user.id, "setnickname")  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
    elif message.text == '–ù–∞–∑–∞–¥ üëàüèª':
        await start(message)  

@dp.message_handler()
async def bot_message(message: types.Message):
    if message.chat.type == 'private':
        if message.text == '–ü–†–û–§–ò–õ–¨ ü§µ':
            await show_profile(message)
        elif message.text == '–ù–ê–°–¢–†–û–ô–ö–ê üõ†':
            await show_settings(message)
        elif message.text == '–£–î–ê–õ–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢ ‚ùå':
            await delete_account(message)
        else:
            if handler.get_signup(message.from_user.id) == 'setnickname':
                if len(message.text) > 20:
                    await message.answer('–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤')
                elif '@' in message.text or '/' in message.text:
                    await message.answer('–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª')
                else:
                    if handler.set_nickname(message.from_user.id, message.text):
                        await message.reply(f'–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è {message.text}')
                        handler.set_signup(message.from_user.id, "setage")
                        await ask_age(message)
                    else:
                        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            else:
                await process_age(message)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ process_age()

async def ask_age(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')

@dp.message_handler()
async def process_age(message: types.Message):
    if handler.get_signup(message.from_user.id) == 'setage':
        if len(message.text) > 20:
            await message.answer('–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤')
        elif not message.text.isdigit():
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.')
        else:
            if handler.set_age(message.from_user.id, message.text):
                handler.set_signup(message.from_user.id, "done")
                await message.answer('–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
                await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=nav.mainmenu)
            else:
                await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    else:
        await message.answer('–ß—Ç–æ?')



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


# @dp.message_handler()
# async def bot_message(message: types.Message):
#     if message.chat.type == 'private':
#         if message.text == '–ü–†–û–§–ò–õ–¨ ü§µ':
#             user_nickname = "–í–∞—à –Ω–∏–∫ " + handler.get_name(message.from_user.id)
#             await message.answer(user_nickname)
#         else:
#             if handler.get_signup(message.from_user.id) == 'setnickname':
#                 if len(message.text) > 20:  
#                     await message.answer('–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤')
#                 elif '@' in message.text or '/' in message.text:  
#                     await message.answer('–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª')
#                 else:
#                     if handler.set_nickname(message.from_user.id, message.text):
#                         handler.set_signup(message.from_user.id, "setage")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–æ–∑—Ä–∞—Å—Ç–∞
#                         await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
#                     else:
#                         await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
#             elif handler.get_signup(message.from_user.id) == 'setage':  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
#                 try:
#                     age = int(message.text)
#                     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è)
#                     if age < 10 or age > 100:
#                         await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
#                     else:
#                         handler.set_age(message.from_user.id, age)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
#                         handler.set_signup(message.from_user.id, "done")
#                         await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=nav.mainmenu)
#                 except ValueError:
#                     await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞')
#             else:
#                 await message.answer('–ß—Ç–æ?')
# @dp.message_handler(commands=['start'])
# async def start(message: types.Message):
#     await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à –±–æ—Ç! –ú—ã —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å ü§ç')
#     await asyncio.sleep(0.5)
#     await gender(message)

# async def gender(message: types.Message):
#     markup = types.ReplyKeyboardMarkup(row_width=2,resize_keyboard=True, one_time_keyboard=True)
#     gender_btn1 = types.KeyboardButton('–ú–∞–ª—å—á–∏–∫')
#     gender_btn2 = types.KeyboardButton('–î–µ–≤–æ—á–∫–∞')
#     markup.add(gender_btn1, gender_btn2)
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª', reply_markup=markup)

# @dp.message_handler(lambda message: message.text in ['–ú–∞–ª—å—á–∏–∫', '–î–µ–≤–æ—á–∫–∞'])
# async def callback_gender(message: types.Message):
#     if message.text == '–ú–∞–ª—å—á–∏–∫':
#         await message.answer('–ú—É–∂—Å–∫–æ–π –ø–æ–ª', reply_markup=types.ReplyKeyboardRemove())
#     else:
#         await message.answer('–ñ–µ–Ω—Å–∫–∏–π  –ø–æ–ª', reply_markup=types.ReplyKeyboardRemove())
#     await asyncio.sleep(0.5)
#     await ask_name(message)

# async def ask_name(message: types.Message):
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è üñã!')

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @dp.message_handler()
# async def get_name(message: types.Message):
#     user_name = message.text
#     await message.answer(f'–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è {user_name}!')
#     await asyncio.sleep(0.5)
#     await ask_age(message)

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# async def ask_age(message: types.Message):
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @dp.message_handler()
# async def get_age(message: types.Message):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
#     if message.text.isdigit():
#         await photo_user(message)
        
#     else:
#         await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.')
     

# async def photo_user(message: types.Message):
#     pass
executor.start_polling(dp)